# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_stockdata.ipynb.

# %% auto 0
__all__ = ['base_path', 'fetch_bhavcopy_data_for_range']

# %% ../nbs/01_stockdata.ipynb 2
import pandas as pd
from datetime import datetime
import requests
import zipfile
import io
import time
import random
from pathlib import Path
import nbdev

# %% ../nbs/01_stockdata.ipynb 3
base_path = nbdev.config.get_config().lib_path

# %% ../nbs/01_stockdata.ipynb 4
def _fetch_daily_bhavcopy(year, month, day, random_delay=False):

    nse_url = "https://archives.nseindia.com/content/historical/EQUITIES"
    nse_url_2 = "https://www1.nseindia.com/content/historical/EQUITIES"

    """Fetches bhavcopy data for a given date, unzips and saves to local path"""
    # Define paths
    file_name = f"cm{day:02}{month}{year}bhav.csv.zip"
    file_url = f"{nse_url}/{year}/{month}/{file_name}"
    file_url_2 = f"{nse_url_2}/{year}/{month}/{file_name}"
    zip_path = base_path / f"../Data/Bhavcopy/Zips/cm{day:02}{month}{year}bhav.csv.zip"
    unzip_dir = base_path / "../Data/Bhavcopy/Raw"

    # If file exists, unzip and save to local path
    if Path(zip_path).is_file():
        print(f"File {file_name} already exists.. unzipping")
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(unzip_dir)
    else:
        if random_delay:
            time.sleep(random.randint(1, 10))

        headers = get_headers()
        print(f"Downloading:{file_url}")

        with requests.Session() as s:
            r = s.get(file_url, allow_redirects=False, headers=headers)

            if r.status_code != 200:    
                print(f"Status: {r.status_code}: {file_url}")
                r = s.get(file_url_2, allow_redirects=False, headers=headers)

            if r.status_code != 200:
                print(f"Status: {r.status_code}: {file_url_2}")
                print(f"~~~~~~~~~~~~> Error downloading file: {file_name}")
                # raise Exception(f"Error downloading file: {file_name}")
            else:
                open(zip_path, "wb").write(r.content)
                with zipfile.ZipFile(io.BytesIO(r.content)) as zip_ref:
                    zip_ref.extractall(unzip_dir)
                    print(f"Processed file: {file_name}")

# %% ../nbs/01_stockdata.ipynb 5
def fetch_bhavcopy_data_for_range(start_date, end_date):
    """Fetches bhavcopy data for a given date range and returns a pandas dataframe"""
    for d in pd.date_range(start_date, end_date):
        # Get Year, Month, Day
        year = d.year
        month = d.strftime("%B").upper()[:3]
        day = d.date().strftime("%d")
        
        # If weekday, process file
        if 0 <= d.weekday() < 5:
            _fetch_daily_bhavcopy(year, month, day, random_delay=True)
